1. 创建list

a_list = ['a', 'b', 'c', 'd'] # 负数 是从列表尾部向前计数


2. list切片（获取子list）

a_list[1:3]     # 获取a_list 从第一个到第三个子元素, 含头不含尾

output : ['b', 'c']

a_list[:]       # 不填代表全部


3. 向列表新增

list = ['1', '2', '3']

list = list + [2.0, 3]  # 尾部追加, 合并列表

list.append()       # 尾部追加， 追加的为单独元素，可以追加任何类型

list.insert(0, '5')     # 特定位置替换

list.extend()       # 尾部最佳，相当于合并  只接收一个参数，并且是列表


4. 检索值

list.count()     # 统计特定元素数量

'b' in list     # 遍历并判断是否存在

list.index()    # 判断某元素存在的位置，只判断第一次出现位置，如果不存在将报错


5. 删除元素（删除后自动收缩）

del list[1]     # 删除指定索引处元素

list.remove()   # 删除指定元素，元素不存在将报错

list.pop()      # 不指定索引时，从list尾部删除一个；指定索引时，删除索引处元素；删除不存在的索引或pop空list，将报错






tuple 是元素不可变的列表。创建后，不允许修改（可进行检索和切片）

特点：
    元组的速度比列表的更快。如果定义一系列常量值，做的仅是进行遍历，使用元组替代列表。
    不需要改变的数据进行‘写保护’将使得代码更安全
    一些元组可用作字典键（包含字符串、数值和其它元组这样的不可变数据的元组）。列表不能当字典键使用。

元组可转换成列表，反之亦然。内建的tuple()函数接收一个列表参数，并返回一个包含同样元素的元组，而list()函数接收一个元组参数并返回一个列表。



同时赋多值

v = ('a', 2, True)
(x, y, z) = v
会将v中的每一个元素按照顺序赋值给另一个元组。
该特性有多种用途。假设需要将某个名称指定某个特定返回值。可以使用内建range()函数进行多变量赋值以快速地进行连续变量赋值。 内建range()函数构造一个整数序列。



集合（set）：存放独特值、无序、任何数据类型的值

1. 创建
set = {1, 2}


2. 修改

add(): 接受单个任何数据类型的参数，并添加到集合中，有唯一性。

update(): 接受一个集合作为参数，重复值省略； 其他数据类型作为参数时，会将其中的所有元素添加到初始集合中

3. 删除

discard()/remove(): 接受一个单值为参数，并从集合中删除该值. 区别：空集合调用discard不产生错误，调用remove引发keyError。
pop() : 删除某个值，并返回该值，删除随机。 空集合调用pop引发keyerror。
clear(): 清空集合。


4. 常见操作

1）检查：使用in
2）union() : 取并集 返回新集合
3）intersection(): 取交集，返回新集合
4）difference(): 返回新集合，装着所有在a_set 出现但未在b_set中的元素
5）symmetric_difference(): 返回新集合，其中装着所有只在其中一个集合中出现的元素。











filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。

filter() 函数接收一个函数func和一个iterable（可以是list， 字符串等）， 这个函数func的作用是对每个元素进行判断， 返回True 或 False，
filter()根据判断结果自动过滤掉不符合条件的元素，最后将返回True的元素放在新列表中。

语法
filter(function, iterable)

参数
function -- 判断函数。
iterable -- 可迭代对象。

返回值
返回符合条件的新列表。


实例
#！/usr/bin/python
# _*_ coding: UTF-8 _*_
list = [1,2,4,6,8,9]
def is_gt_5(num):
    return num > 5

new_list = filter(is_gt_5, list)


高级用法

1. 过滤非数字字符

name = 'pythontab.com 2018'
filter(str.isdigit, name)


2. 过滤数字

filter(str.isalpha, name)


3. 保留数字和小数点

filter(lambda char: char in '0123456789.', name)










exec执行函数
exec函数功能：执行储存在字符串或文件中的Python语句，相比于eval，exec可以执行更复杂的Python代码。

语法
exec(object[,globals[,locals]])

参数
object: 必选参数，表示需要被指定的Python代码。它必须是字符串或code对象。如果object是一个字符串，该字符串会先被解析为一组Python语句，然后在执行。如果object是一个code对象，
那么它只是被简单的执行。
globals：可选参数，表示全局命名空间（存在全局变量），如果被提供，则必须是一个字典对象。
locals： 可选参数，表示当前局部命名空间（存放局部变量）， 如果被提供，可以是任何映射对象。如果该参数被忽略，那么他将会取与globals相同的值。

返回值
exec 返回值永远为None。

实例

exec 'print "Hello Python"'

# 单行语句字符串
exec 'print "pythontab.com"'

# 多行语句字符串
exec """for i in range(5):
print "iter time: %d" %i
"""

iter time: 0
iter time: 1
iter time: 2






eval 函数

函数定义：
eval(expression, globals=None, locals=None)
将字符串str当成有效的表达式来求值并返回计算结果。globals和locals参数是可选的，如果提供了globals参数，那么它必须是dictionary类型；如果提供了
locals参数，那么它可以是任意的map对象。
python的全局名字空间存储在一个叫globals()的dict对象中；局部名字空间存储在一个叫locals()的dict对象中。我们可以用print(locals())来查看该函数
体内的所有变量名和变量值。


eval() 主要作用：
    1）在编译语言里要动态的产生代码，基本上是不能的，但是动态语言是可以的，意味着软件已经部署到服务器上了，但只要做很少的更改，只好直接修改这部分的代码，
    就可立即实现变化，不用整个软件重新加载。
    2）在machin learning里根据用户使用这个软件频率，以及方式，可动态的修改代码，适应用户的变化。


例：
a = 1
g = {'a' : 20}
eval("a+1", g)


例 测试globals，locals

x = 1
y = 1
num1 = eval("x+y")
print(num1)

def g():
    x = 2
    y = 2
    num3 = eval("x+y")
    print(num3)
    num2 = eval("x+y", globals())
    print(num2)

g()

num1的值是2，num3的值是4；由于提供了globals()参数，应当找全局的x和y值，也就是都是为1，那么显而易见，num2值也是2.


因为eval特型
1. 自行写检查函数
2. 使用ast.literal_eval代替



enumerate函数：
说明 函数原型： enumerate(sequence, [start=0])
功能：将可循序列sequence以start开始分别列出序列数据和数据下标；即对一个可便利的数据对象（如列表、元组或字符串）， enumerate会将该数据对象组合为一个索引序列，同时列出数据和数据下标。


举例：
存在一个sequence，对其使用enumerate将会得到如下结果:
start sequence[0]
start+1 sequence[1]
start+2 sequence[2]


代码实例：
enumerate参数为遍历的变量，如字符串，列表等；返回值为enumerate类。
import string
s = string.ascii_lowercase
e = enumerate(s)
print s
print list(e)

在同时需要index和value值得时候可以使用enumerate。
该实例中，line是个string包含0和1，要把1都找出来：
def xread_line(line):
    return ((idx,int(val)) for idx, val in enumerate(line) if val != '0')

print read)line('0001110101')
print(list(xread_line('0001110101'))



int(x, [base])
功能：函数的作用是将一个数字或base类型的字符串转换成证书

函数原型：
int(x=0)
int(x, base=10), base缺省值为10，也就是说不指定base得值时，函数将x按十进制处理。

1. x可以是数字或字符串，但是base被赋值后x只能是字符串；
2. x作为字符串时必须是base类型，也就是说x变成数字时必须能用base进制表示。

表示：2~36，原因：十个数字加二十六个英文字母表示，相应进制对应相应数字和字母。



id函数：
id(object)
功能：返回的是对象的身份证号，唯一且不变，但在不重合的生命周期里，可能会出现相同的id值。此处所说的对象应该特指复合类型的对象（如类、list），对于字符串、整数等类型，变量的id是随值得变化而改变的。

is 与 == 的区别是，is是内存中的比较，而==是值得比较


divmod数字处理函数

divmod(a, b)函数
返回的是a//b(除法取整)以及a对b的余数，返回结果类型为tuple

参数：
a,b可以为数字（包括复数）



dir() 函数
可以使用内建的dir函数来列出模块定义的标识符。标识符有函数、类和变量。
当为dir()提供一个模块名的时候，它返回模块定义的名称列表。如果不提供参数，他返回当前模块中定义的名称列表。
在输入的sys模块上使用dir。它包含一个庞大的属性列表。
当不给dir函数传递参数而使用它--默认的，它返回当前模块的属性列表。注意，输入的模块同样是列表的一部分。
为了观察dir的作用，我们定义一个新的变量a并且给它赋一个值，然后检验dir，我们观察到在列表中增加了以上相同的值。我们使用del语句删除当前模块中的变量/属性，这个变化再一次反映在dir的输出中。
关于del的一点注释：这个语句在运行后被用来删除一个变量/名称。在这个例子中，del a，你将无法再使用变量a--他就好像从来没有存在过一样。



delattr(object, name)
中文说明：删除object对象名为name的属性。
参数object：对象。
参数name：属性名称字符串。


complex([real[,image]])
创建一个值为real+image * j的复数或着转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。
参数real： int，long，float或string；
参数image：int，long，float


compile(source,filename,mode[,flags[,dont_inherit]])
中文说明：将source编译为代码或者AST对象。代码对象能够通过exec语句来执行或者eval()进行求值。
参数source：字符串或AST（Abstract Syntax Trees）对象。
参数filename：代码文件名称，如果不是从文件读取代码则传递一些可辨识的值。
参数model：指定编译代码的种类。可以指定为exec，eval，single。
参数flag和dont_inherit：可选参数。


cmp(x, y)
比较两个对象x和y，如果x < y,返回负数；x == y，返回0；x > y，返回正数。


classmethod(function)
中文说明：
classmethod 是用来制定一个类的方法为类方法，没有此参数指定的类的方法为实例方法，使用方法如下：
class C:
    @classmethod
    def f(cls, arg1, arg2, ...):...
在Python 3中，字符串是以Unicode编码的，Python的字符串支持多语言，

对于单个字符的编码，Python提供了ord()函数获取字符对应的整数表示，使用char()函数将整数转换成对应的字符。

由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。在网络上传输或者保存在磁盘中时，需要把str变为字节为单位的bytes。

Python 对 bytes 类型的数据用带b前缀的单引号或双引号表示

以Unicode表示的str通过encode()方法可以编码为指定的bytes。

#!/usr/bin/env python3     告诉系统这是一个Python可执行程序，Windows会忽略这个注释
# _*_ coding: utf-8 _*_    告诉Python解释器，按照UTF-8编码读取源代码，否则，在源代码中写的中文输出可能会有乱码

在申明UTF-8编码并不意味着.py文件就是UTF-8编码的，必须并且要确保文本编译器正在使用UTF-8 without BOM编码。


格式化

采用的格式化方式和C语言一致，使用%实现，举例如下：

>>> 'Hello, %s' % 'world'
'Hello, world'

%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。
如果只有一个%?，括号可以省略。


常见的占位符有：

    占位符	    替换内容
     %d	         整数
     %f	         浮点数
     %s	         字符串
     %x	         十六进制整数
其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数。


format()

另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：

>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
'Hello, 小明, 成绩提升了 17.1%'




总结：Python 3中使用Unicode编码，一般存储在硬盘等的数据保存以utf-8编码方式存储，从硬盘等读取到内存中时将utf-8编码转成Unicode编码。
     一般英文使用ASCII表示，一个英文字母暂用一个字节，一个汉字暂用两个字节。
     如果要把bytes变为str，需要使用decode(), 如果要把str变为bytes，需要使用encode()